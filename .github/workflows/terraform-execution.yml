name: 'terraform-execution'

on:
  workflow_call:
    secrets:
      AWS_ACCESS_KEY_ID:
        description: 'AWS Access Key'
        required: false
      AWS_SECRET_ACCESS_KEY:
        description: 'AWS Secret Key'
        required: false
      AWS_DEFAULT_REGION:
        description: 'AWS Region'
        required: true

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

jobs:
  terraform-checks:
    name: 'terraform-checks'
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository to the GitHub Actions runner.
    - name: Checkout
      id: checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token.
    - name: Setup Terraform
      id: setup
      uses: hashicorp/setup-terraform@v1

    # Checks that all Terraform configuration files complies with the canonical format.
    - name: Terraform Format
      id: fmt
      run: make fmt
      continue-on-error: true

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: make init
      if: steps.fmt.outcome == 'success'
      continue-on-error: true

    # Verify whether a configuration is syntactically valid and internally consistent.
    - name: Terraform Validate
      id: validate
      run: make validate
      if: steps.init.outcome == 'success'
      continue-on-error: true

    # Generates an execution plan for Terraform to preview changes in the infrastructure.
    - name: Terraform Plan
      id: plan
      run: make plan
      if: steps.validate.outcome == 'success'
      continue-on-error: true
    
    # Updates the PR with the format, init, validate and plan outputs
    - uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      env:
        FMT: "${{ steps.fmt.outputs.stdout }} ${{ steps.fmt.outputs.stderr }}"
        INIT: "${{ steps.init.outputs.stdout }} ${{ steps.init.outputs.stderr }}"
        VALID: "${{ steps.validate.outputs.stdout }} ${{ steps.validate.outputs.stderr }}"
        PLAN: "${{ steps.plan.outputs.stdout }} ${{ steps.plan.outputs.stderr }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `## Terraform Checks:
          
          #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          <details><summary>Show Format</summary>
          
          \`\`\`terraform
          ${process.env.FMT}
          \`\`\`

          </details>

          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          <details><summary>Show Initialization</summary>
          
          \`\`\`terraform
          ${process.env.INIT}
          \`\`\`

          </details>
          
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

          <details><summary>Show Validation</summary>
          
          \`\`\`terraform
          ${process.env.VALID}
          \`\`\`

          </details>

          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`terraform
          ${process.env.PLAN}
          \`\`\`

          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    # Check if any validation check has failed.
    - name: Validate Status
      if: steps.fmt.outcome != 'success' || steps.init.outcome != 'success' || steps.validate.outcome != 'success' || steps.plan.outcome != 'success'
      run: exit 1

  terraform-apply:
    name: 'terraform-apply'
    runs-on: ubuntu-latest
    needs: terraform-checks
    if: github.event_name == 'pull_request'
    environment: github.ref

    steps:
    
    # Change infrastructure according to Terraform configuration files.
    - name: Terraform Apply
      id: apply
      run: ls -la
      continue-on-error: true

    # Updates the PR with the apply output
    - uses: actions/github-script@0.9.0
      env:
        APPLY: "${{ steps.apply.outputs.stdout }} ${{ steps.apply.outputs.stderr }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `## Terraform Apply:
          
          #### Terraform Apply üìñ\`${{ steps.apply.outcome }}\`
          
          <details><summary>Show Apply</summary>
          
          \`\`\`terraform
          ${process.env.APPLY}
          \`\`\`

          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    # Check if the apply step has failed.
    - name: Validate Status
      if: steps.apply.outcome != 'success'
      run: exit 1


  terraform-plan-destroy:
    name: 'terraform-plan-destroy'
    runs-on: ubuntu-latest
    needs: terraform-checks
    environment: github.ref

    steps:
    
    # Generates an execution plan for Terraform to preview changes in the infrastructure.
    - name: Terraform Plan Destroy
      id: plan-destroy
      run: ls -la
      continue-on-error: true

    # Updates the PR with the plan destroy output
    - uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      env:
        PLAN: "${{ steps.plan-destroy.outputs.stdout }} ${{ steps.plan-destroy.outputs.stderr }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `## Terraform Plan Destroy:
          
          #### Terraform Plan Destroy üìñ\`${{ steps.plan-destroy.outcome }}\`
          
          <details><summary>Show Apply</summary>
          
          \`\`\`terraform
          ${process.env.PLAN}
          \`\`\`

          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    # Check if the plan destroy step has failed.
    - name: Validate Status
      if: steps.plan-destroy.outcome != 'success'
      run: exit 1

  terraform-destroy:
    name: 'terraform-destroy'
    runs-on: ubuntu-latest
    needs: terraform-plan-destroy
    if: github.event_name == 'pull_request'
    environment: github.ref

    steps:
    
    # Destroy the created infrastructure.
    - name: Terraform Destroy
      id: destroy
      run: ls -la
      continue-on-error: true

    # Updates the PR with the destroy output
    - uses: actions/github-script@0.9.0
      env:
        PLAN: "${{ steps.destroy.outputs.stdout }} ${{ steps.destroy.outputs.stderr }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `## Terraform Destroy:
          
          #### Terraform Destroy üìñ\`${{ steps.destroy.outcome }}\`
          
          <details><summary>Show Destroy</summary>
          
          \`\`\`terraform
          ${process.env.DESTROY}
          \`\`\`

          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    # Check if the plan destroy step has failed.
    - name: Validate Status
      if: steps.destroy.outcome != 'success'
      run: exit 1